openapi: 3.0.3
info:
  title: University Management System API
  version: 1.1.0
  description: RESTful API for a University System, structured by microservice boundaries with synchronous and asynchronous communication models.

servers:
  - url: https://api.university.edu

paths:
  # Auth Service
  /api/auth/login:
    post:
      summary: Student login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - studentId
                - password
              properties:
                studentId:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Access token issued

  /api/auth/logout:
    post:
      summary: Logout session
      responses:
        '200':
          description: Logged out

  /api/auth/refresh-session:
    post:
      summary: Refresh user session
      responses:
        '200':
          description: Session refreshed

  # Application Service
  /api/application/undergraduate:
    post:
      summary: Submit undergraduate application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - program
                - academicHistory
              properties:
                name:
                  type: string
                email:
                  type: string
                program:
                  type: string
                academicHistory:
                  type: array
                  items:
                    type: object
                    properties:
                      institution:
                        type: string
                      grade:
                        type: string
      responses:
        '202':
          description: Application received and being processed asynchronously

  /api/application/postgraduate:
    post:
      summary: Submit postgraduate application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - program
                - researchInterest
              properties:
                name:
                  type: string
                email:
                  type: string
                program:
                  type: string
                researchInterest:
                  type: string
      responses:
        '202':
          description: Application received and being processed asynchronously

  # Portal Service
  /api/portal/overview:
    get:
      summary: Get daily overview and calendar
      responses:
        '200':
          description: Calendar events returned

  /api/portal/plan:
    get:
      summary: View academic plan
      responses:
        '200':
          description: Academic plan details

  /api/portal/plan/simulate:
    post:
      summary: Simulate registration using academic plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selectedCourses:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Simulation result

  # Course Catalog Service
  /api/courses:
    get:
      summary: Get course list
      responses:
        '200':
          description: List of courses

  /api/courses/{id}:
    get:
      summary: Get course details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course detail

  /api/courses/cart:
    post:
      summary: Add course to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId:
                  type: string
      responses:
        '200':
          description: Course added to cart
    get:
      summary: View cart
      responses:
        '200':
          description: Cart details

  /api/courses/registered:
    get:
      summary: View registered courses
      responses:
        '200':
          description: Registered courses list

  /api/courses/waitlisted:
    get:
      summary: View waitlisted courses
      responses:
        '200':
          description: Waitlisted courses list

  # Registration Service
  /api/registration/register:
    post:
      summary: Register for courses (Async via message broker)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseIds:
                  type: array
                  items:
                    type: string
      responses:
        '202':
          description: Registration request received and will be processed asynchronously

  /api/registration/drop/{courseId}:
    delete:
      summary: Drop a course (Async via message broker)
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Drop request received and will be processed asynchronously

  /api/registration/simulate:
    post:
      summary: Simulate registration process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Simulation result

  # Grades Service
  /api/grades/transcript:
    get:
      summary: Get unofficial transcript
      responses:
        '200':
          description: Transcript data

  /api/grades/report/{semesterId}:
    get:
      summary: Get semester grade report
      parameters:
        - in: path
          name: semesterId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Semester grades returned

  /api/grades/attendance:
    get:
      summary: Get attendance report
      responses:
        '200':
          description: Attendance details

  # Finance Service
  /api/finance/balance:
    get:
      summary: View balance and fees
      responses:
        '200':
          description: Balance info returned

  /api/finance/receipts:
    get:
      summary: View past receipts
      responses:
        '200':
          description: Receipts list

  /api/finance/receipts/{id}/print:
    get:
      summary: Print receipt
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Receipt printed

  # Admin Service
  /api/admin/dashboard:
    get:
      summary: Get admin dashboard
      responses:
        '200':
          description: Dashboard data

  # Registrar Service
  /api/registrar/course:
    post:
      summary: Add a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                title:
                  type: string
                credits:
                  type: integer
                schedule:
                  type: string
      responses:
        '201':
          description: Course added

  /api/registrar/course/{id}:
    put:
      summary: Modify a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                credits:
                  type: integer
                schedule:
                  type: string
      responses:
        '200':
          description: Course updated

  /api/registrar/students/{id}/grades:
    put:
      summary: Change student grade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId:
                  type: string
                grade:
                  type: string
      responses:
        '200':
          description: Grade changed

  /api/registrar/course/{id}/assign:
    put:
      summary: Assign professors/TAs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                professorId:
                  type: string
                taIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Assignment done

  /api/registrar/conflicts/{id}/approve:
    post:
      summary: Approve conflict resolution
      responses:
        '200':
          description: Conflict approved

  /api/registrar/students/{id}/register:
    post:
      summary: Register course on behalf of student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Course registered

  /api/registrar/students/{id}/drop/{courseId}:
    delete:
      summary: Drop course on behalf of student
      responses:
        '200':
          description: Course dropped

  # Professor Service
  /api/professor/course/{id}/attendance:
    post:
      summary: Record attendance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Attendance recorded

  /api/professor/course/{id}/grades:
    post:
      summary: Upload grades
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grades:
                  type: array
                  items:
                    type: object
                    properties:
                      studentId:
                        type: string
                      grade:
                        type: string
      responses:
        '200':
          description: Grades uploaded

  /api/professor/courses:
    get:
      summary: View assigned courses
      responses:
        '200':
          description: Assigned courses list

components:
  schemas: {}

x-synchronous:
  - Most REST API endpoints are synchronous.

x-asynchronous:
  - POST /api/application/undergraduate
  - POST /api/application/postgraduate
  - POST /api/registration/register
  - DELETE /api/registration/drop/{courseId}
  - These endpoints enqueue messages to a message broker for background processing.
