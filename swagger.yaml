openapi: 3.0.3
info:
  title: Video Platform API
  version: 1.0.0
  description: RESTful API for a video sharing and streaming platform.

servers:
  - url: https://api.videoplatform.com

paths:
  # Auth Service
  /api/v1/auth/signup:
    post:
      tags: [Auth Service]
      summary: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
              required: [email, password]
      responses:
        '201':
          description: User created

  /api/v1/auth/login:
    post:
      tags: [Auth Service]
      summary: Log in with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }

  /api/v1/auth/logout:
    post:
      tags: [Auth Service]
      summary: Log out and invalidate session
      responses:
        '200':
          description: Logout successful

  # User Profile Service
  /api/v1/user/profile:
    get:
      tags: [User Profile Service]
      summary: Get the current user's profile
      responses:
        '200':
          description: Profile data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  username: { type: string }
                  email: { type: string }

    put:
      tags: [User Profile Service]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                bio: { type: string }
      responses:
        '200':
          description: Profile updated

  /api/v1/user/subscribe/{channelId}:
    post:
      tags: [User Profile Service]
      summary: Subscribe to a channel
      parameters:
        - in: path
          name: channelId
          required: true
          schema: { type: string }
      responses:
        '200': { description: Subscribed }

    delete:
      tags: [User Profile Service]
      summary: Unsubscribe from a channel
      parameters:
        - in: path
          name: channelId
          required: true
          schema: { type: string }
      responses:
        '200': { description: Unsubscribed }

  /api/v1/user/subscriptions:
    get:
      tags: [User Profile Service]
      summary: Get list of subscriptions
      responses:
        '200':
          description: List of channels returned
          content:
            application/json:
              schema:
                type: array
                items: { type: string }

  # Video Upload Service
  /api/v1/videos/upload:
    post:
      tags: [Video Upload Service]
      summary: Upload a video file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201': { description: Video uploaded }

  /api/v1/videos/metadata:
    post:
      tags: [Video Upload Service]
      summary: Submit video metadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                description: { type: string }
                tags:
                  type: array
                  items: { type: string }
                visibility:
                  type: string
                  enum: [public, private, unlisted]
      responses:
        '200': { description: Metadata saved }

  /api/v1/videos/upload/status/{uploadId}:
    get:
      tags: [Video Upload Service]
      summary: Get the status of a video upload
      parameters:
        - in: path
          name: uploadId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Upload status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }

  # Recommendation Service
  /api/v1/recommendations/home:
    get:
      tags: [Recommendation Service]
      summary: Get personalized homepage feed
      responses:
        '200':
          description: Recommended videos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    videoId: { type: string }
                    title: { type: string }

  # Video Streaming Service
  /api/v1/videos/stream/{videoId}:
    get:
      tags: [Streaming Service]
      summary: Stream video by ID
      parameters:
        - in: path
          name: videoId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Stream started
          content:
            video/mp4:
              schema:
                type: string
                format: binary
