openapi: 3.1.0
info:
  title: University Registration Microservice System
  version: 1.0.0
  description: >
    OpenAPI documentation for a university registration system split into microservices.

servers:
  - url: https://api.university.edu

paths:
  # Auth Service
  /api/auth/login:
    post:
      summary: Sign in with student ID and password
      tags: [Auth Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                student_id:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }
                  role: { type: string }

  /api/auth/logout:
    post:
      summary: Sign out manually or automatically
      tags: [Auth Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken: { type: string }
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/auth/refresh-session:
    post:
      summary: Extend session using refresh token
      tags: [Auth Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: { type: string }
      responses:
        '200':
          description: Session extended
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  expiresIn: { type: integer }

  # Application Service
  /api/application/undergraduate:
    post:
      summary: Submit undergraduate application
      tags: [Application Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                dob: { type: string }
                program: { type: string }
                documents:
                  type: array
                  items: { type: string }
      responses:
        '201':
          description: Application submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicationId: { type: string }
                  status: { type: string }

  /api/application/postgraduate:
    post:
      summary: Submit postgraduate application
      tags: [Application Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                dob: { type: string }
                program: { type: string }
                documents:
                  type: array
                  items: { type: string }
      responses:
        '201':
          description: Application submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicationId: { type: string }
                  status: { type: string }

  # Portal Service
  /api/portal/overview:
    get:
      summary: Get daily overview and calendar
      tags: [Portal Service]
      responses:
        '200':
          description: Overview data
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        title: { type: string }
                        time: { type: string }

  /api/portal/plan:
    get:
      summary: View academic plan
      tags: [Portal Service]
      responses:
        '200':
          description: Academic plan details
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    type: array
                    items:
                      type: object
                      properties:
                        semester: { type: string }
                        courses:
                          type: array
                          items: { type: string }

  /api/portal/plan/simulate:
    post:
      summary: Simulate registration plan
      tags: [Portal Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courses:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Simulation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  issues:
                    type: array
                    items: { type: string }
                  feasibility: { type: boolean }

  # Grades Service
  /api/grades/transcript:
    get:
      summary: View unofficial transcript
      tags: [Grades Service]
      responses:
        '200':
          description: Transcript fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  transcript:
                    type: array
                    items:
                      type: object
                      properties:
                        course: { type: string }
                        grade: { type: string }

  /api/grades/report/{semesterId}:
    get:
      summary: View grade report by semester
      tags: [Grades Service]
      parameters:
        - name: semesterId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Semester grades
          content:
            application/json:
              schema:
                type: object
                properties:
                  grades:
                    type: array
                    items:
                      type: object
                      properties:
                        course: { type: string }
                        grade: { type: string }

  /api/grades/attendance:
    get:
      summary: View attendance report
      tags: [Grades Service]
      responses:
        '200':
          description: Attendance report
          content:
            application/json:
              schema:
                type: object
                properties:
                  attendance:
                    type: array
                    items:
                      type: object
                      properties:
                        course: { type: string }
                        attendance: { type: string }

  # Course Catalog Service
  /api/courses:
    get:
      summary: View or search courses
      tags: [Course Catalog Service]
      responses:
        '200':
          description: Course list
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        title: { type: string }
                        schedule: { type: string }

  /api/courses/{id}:
    get:
      summary: Get course details
      tags: [Course Catalog Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: { type: string }
                  title: { type: string }
                  description: { type: string }
                  schedule: { type: string }

  /api/courses/cart:
    post:
      summary: Add course to cart
      tags: [Course Catalog Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId: { type: string }
      responses:
        '200':
          description: Added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

    get:
      summary: View cart contents
      tags: [Course Catalog Service]
      responses:
        '200':
          description: Cart contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    type: array
                    items:
                      type: object
                      properties:
                        courseId: { type: string }
                        title: { type: string }

  /api/courses/registered:
    get:
      summary: View registered courses
      tags: [Course Catalog Service]
      responses:
        '200':
          description: Registered courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  registered:
                    type: array
                    items:
                      type: object
                      properties:
                        courseId: { type: string }
                        title: { type: string }

  /api/courses/waitlisted:
    get:
      summary: View waitlisted courses
      tags: [Course Catalog Service]
      responses:
        '200':
          description: Waitlisted courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  waitlisted:
                    type: array
                    items:
                      type: object
                      properties:
                        courseId: { type: string }
                        title: { type: string }

  # Registration Service (Asynchronous)
  /api/registration/register:
    post:
      summary: Submit course registration (async)
      tags: [Registration Service]
      description: Registration is queued and processed asynchronously.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courses:
                  type: array
                  items: { type: string }
      responses:
        '202':
          description: Registration request accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registration/drop/{courseId}:
    delete:
      summary: Drop a registered course
      tags: [Registration Service]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Course dropped
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registration/simulate:
    post:
      summary: Simulate registration feasibility
      tags: [Registration Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                courses:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Simulation results
          content:
            application/json:
              schema:
                type: object
                properties:
                  issues:
                    type: array
                    items: { type: string }
                  feasible: { type: boolean }

  # Finance Service
  /api/finance/balance:
    get:
      summary: View balance and semester fees
      tags: [Finance Service]
      responses:
        '200':
          description: Finance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance: { type: number, format: float }
                  fees: { type: number, format: float }

  /api/finance/receipts:
    get:
      summary: View past semester receipts
      tags: [Finance Service]
      responses:
        '200':
          description: List of receipts
          content:
            application/json:
              schema:
                type: object
                properties:
                  receipts:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        amount: { type: number }
                        semester: { type: string }

  /api/finance/receipts/{id}/print:
    get:
      summary: Download or print receipt
      tags: [Finance Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Print receipt
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }

  # Admin Service
  /api/admin/dashboard:
    get:
      summary: Admin dashboard view
      tags: [Admin Service]
      responses:
        '200':
          description: Admin analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrollments: { type: integer }
                  traffic: { type: integer }

  # Registrar Service
  /api/registrar/course:
    post:
      summary: Add new course
      tags: [Registrar Service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                schedule: { type: string }
                description: { type: string }
      responses:
        '201':
          description: Course added
          content:
            application/json:
              schema:
                type: object
                properties:
                  courseId: { type: string }
                  message: { type: string }

  /api/registrar/course/{id}:
    put:
      summary: Modify course details
      tags: [Registrar Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                schedule: { type: string }
      responses:
        '200':
          description: Course updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registrar/students/{id}/grades:
    put:
      summary: Change student grade
      tags: [Registrar Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId: { type: string }
                newGrade: { type: string }
      responses:
        '200':
          description: Grade updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registrar/course/{id}/assign:
    put:
      summary: Assign professors and TAs
      tags: [Registrar Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                professors:
                  type: array
                  items: { type: string }
                TAs:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Assignments saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registrar/conflicts/{id}/approve:
    post:
      summary: Approve conflict resolution (async)
      tags: [Registrar Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                note: { type: string }
      responses:
        '202':
          description: Conflict approval request submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registrar/students/{id}/register:
    post:
      summary: Registrar registers course for student
      tags: [Registrar Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                courseId: { type: string }
      responses:
        '200':
          description: Course registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/registrar/students/{id}/drop/{courseId}:
    delete:
      summary: Registrar drops course for student
      tags: [Registrar Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Course dropped
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  # Professor Service
  /api/professor/course/{id}/attendance:
    post:
      summary: Record attendance
      tags: [Professor Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attendance:
                  type: array
                  items:
                    type: object
                    properties:
                      studentId: { type: string }
                      status: { type: string, enum: [present, absent] }
      responses:
        '200':
          description: Attendance recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/professor/course/{id}/grades:
    post:
      summary: Upload grades
      tags: [Professor Service]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grades:
                  type: array
                  items:
                    type: object
                    properties:
                      studentId: { type: string }
                      grade: { type: string }
      responses:
        '200':
          description: Grades uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }

  /api/professor/courses:
    get:
      summary: View assigned courses
      tags: [Professor Service]
      responses:
        '200':
          description: Assigned courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        title: { type: string }

